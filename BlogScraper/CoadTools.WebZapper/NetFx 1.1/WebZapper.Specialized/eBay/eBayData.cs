//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace CoadTools.WebZapper.Specialized.eBay {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class eBayData : DataSet {
        
        private eBayItemDataTable tableeBayItem;
        
        public eBayData() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected eBayData(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["eBayItem"] != null)) {
                    this.Tables.Add(new eBayItemDataTable(ds.Tables["eBayItem"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public eBayItemDataTable eBayItem {
            get {
                return this.tableeBayItem;
            }
        }
        
        public override DataSet Clone() {
            eBayData cln = ((eBayData)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["eBayItem"] != null)) {
                this.Tables.Add(new eBayItemDataTable(ds.Tables["eBayItem"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableeBayItem = ((eBayItemDataTable)(this.Tables["eBayItem"]));
            if ((this.tableeBayItem != null)) {
                this.tableeBayItem.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "eBayData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Dataset1.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableeBayItem = new eBayItemDataTable();
            this.Tables.Add(this.tableeBayItem);
        }
        
        private bool ShouldSerializeeBayItem() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void eBayItemRowChangeEventHandler(object sender, eBayItemRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class eBayItemDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTitle;
            
            private DataColumn columnStartPrice;
            
            private DataColumn columnCurrentPrice;
            
            private DataColumn columnEndPrice;
            
            private DataColumn columnItemNumber;
            
            private DataColumn columnCatagory;
            
            private DataColumn columnNumBids;
            
            private DataColumn columnStartDate;
            
            private DataColumn columnEndTime;
            
            private DataColumn columnCurrentStatus;
            
            private DataColumn columnQuantity;
            
            private DataColumn columnMaxBid;
            
            private DataColumn columnTimeStamp;
            
            internal eBayItemDataTable() : 
                    base("eBayItem") {
                this.InitClass();
            }
            
            internal eBayItemDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            internal DataColumn StartPriceColumn {
                get {
                    return this.columnStartPrice;
                }
            }
            
            internal DataColumn CurrentPriceColumn {
                get {
                    return this.columnCurrentPrice;
                }
            }
            
            internal DataColumn EndPriceColumn {
                get {
                    return this.columnEndPrice;
                }
            }
            
            internal DataColumn ItemNumberColumn {
                get {
                    return this.columnItemNumber;
                }
            }
            
            internal DataColumn CatagoryColumn {
                get {
                    return this.columnCatagory;
                }
            }
            
            internal DataColumn NumBidsColumn {
                get {
                    return this.columnNumBids;
                }
            }
            
            internal DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            internal DataColumn EndTimeColumn {
                get {
                    return this.columnEndTime;
                }
            }
            
            internal DataColumn CurrentStatusColumn {
                get {
                    return this.columnCurrentStatus;
                }
            }
            
            internal DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            internal DataColumn MaxBidColumn {
                get {
                    return this.columnMaxBid;
                }
            }
            
            internal DataColumn TimeStampColumn {
                get {
                    return this.columnTimeStamp;
                }
            }
            
            public eBayItemRow this[int index] {
                get {
                    return ((eBayItemRow)(this.Rows[index]));
                }
            }
            
            public event eBayItemRowChangeEventHandler eBayItemRowChanged;
            
            public event eBayItemRowChangeEventHandler eBayItemRowChanging;
            
            public event eBayItemRowChangeEventHandler eBayItemRowDeleted;
            
            public event eBayItemRowChangeEventHandler eBayItemRowDeleting;
            
            public void AddeBayItemRow(eBayItemRow row) {
                this.Rows.Add(row);
            }
            
            public eBayItemRow AddeBayItemRow(string Title, System.Single StartPrice, System.Single CurrentPrice, System.Single EndPrice, int ItemNumber, int Catagory, int NumBids, System.DateTime StartDate, System.DateTime EndTime, int CurrentStatus, int Quantity, System.Single MaxBid, System.DateTime TimeStamp) {
                eBayItemRow roweBayItemRow = ((eBayItemRow)(this.NewRow()));
                roweBayItemRow.ItemArray = new object[] {
                        Title,
                        StartPrice,
                        CurrentPrice,
                        EndPrice,
                        ItemNumber,
                        Catagory,
                        NumBids,
                        StartDate,
                        EndTime,
                        CurrentStatus,
                        Quantity,
                        MaxBid,
                        TimeStamp};
                this.Rows.Add(roweBayItemRow);
                return roweBayItemRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                eBayItemDataTable cln = ((eBayItemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new eBayItemDataTable();
            }
            
            internal void InitVars() {
                this.columnTitle = this.Columns["Title"];
                this.columnStartPrice = this.Columns["StartPrice"];
                this.columnCurrentPrice = this.Columns["CurrentPrice"];
                this.columnEndPrice = this.Columns["EndPrice"];
                this.columnItemNumber = this.Columns["ItemNumber"];
                this.columnCatagory = this.Columns["Catagory"];
                this.columnNumBids = this.Columns["NumBids"];
                this.columnStartDate = this.Columns["StartDate"];
                this.columnEndTime = this.Columns["EndTime"];
                this.columnCurrentStatus = this.Columns["CurrentStatus"];
                this.columnQuantity = this.Columns["Quantity"];
                this.columnMaxBid = this.Columns["MaxBid"];
                this.columnTimeStamp = this.Columns["TimeStamp"];
            }
            
            private void InitClass() {
                this.columnTitle = new DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTitle);
                this.columnStartPrice = new DataColumn("StartPrice", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStartPrice);
                this.columnCurrentPrice = new DataColumn("CurrentPrice", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrentPrice);
                this.columnEndPrice = new DataColumn("EndPrice", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEndPrice);
                this.columnItemNumber = new DataColumn("ItemNumber", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItemNumber);
                this.columnCatagory = new DataColumn("Catagory", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCatagory);
                this.columnNumBids = new DataColumn("NumBids", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumBids);
                this.columnStartDate = new DataColumn("StartDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStartDate);
                this.columnEndTime = new DataColumn("EndTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEndTime);
                this.columnCurrentStatus = new DataColumn("CurrentStatus", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrentStatus);
                this.columnQuantity = new DataColumn("Quantity", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuantity);
                this.columnMaxBid = new DataColumn("MaxBid", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaxBid);
                this.columnTimeStamp = new DataColumn("TimeStamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeStamp);
            }
            
            public eBayItemRow NeweBayItemRow() {
                return ((eBayItemRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new eBayItemRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(eBayItemRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.eBayItemRowChanged != null)) {
                    this.eBayItemRowChanged(this, new eBayItemRowChangeEvent(((eBayItemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.eBayItemRowChanging != null)) {
                    this.eBayItemRowChanging(this, new eBayItemRowChangeEvent(((eBayItemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.eBayItemRowDeleted != null)) {
                    this.eBayItemRowDeleted(this, new eBayItemRowChangeEvent(((eBayItemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.eBayItemRowDeleting != null)) {
                    this.eBayItemRowDeleting(this, new eBayItemRowChangeEvent(((eBayItemRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveeBayItemRow(eBayItemRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class eBayItemRow : DataRow {
            
            private eBayItemDataTable tableeBayItem;
            
            internal eBayItemRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableeBayItem = ((eBayItemDataTable)(this.Table));
            }
            
            public string Title {
                get {
                    try {
                        return ((string)(this[this.tableeBayItem.TitleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableeBayItem.TitleColumn] = value;
                }
            }
            
            public System.Single StartPrice {
                get {
                    try {
                        return ((System.Single)(this[this.tableeBayItem.StartPriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableeBayItem.StartPriceColumn] = value;
                }
            }
            
            public System.Single CurrentPrice {
                get {
                    try {
                        return ((System.Single)(this[this.tableeBayItem.CurrentPriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableeBayItem.CurrentPriceColumn] = value;
                }
            }
            
            public System.Single EndPrice {
                get {
                    try {
                        return ((System.Single)(this[this.tableeBayItem.EndPriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableeBayItem.EndPriceColumn] = value;
                }
            }
            
            public int ItemNumber {
                get {
                    try {
                        return ((int)(this[this.tableeBayItem.ItemNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableeBayItem.ItemNumberColumn] = value;
                }
            }
            
            public int Catagory {
                get {
                    try {
                        return ((int)(this[this.tableeBayItem.CatagoryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableeBayItem.CatagoryColumn] = value;
                }
            }
            
            public int NumBids {
                get {
                    try {
                        return ((int)(this[this.tableeBayItem.NumBidsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableeBayItem.NumBidsColumn] = value;
                }
            }
            
            public System.DateTime StartDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableeBayItem.StartDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableeBayItem.StartDateColumn] = value;
                }
            }
            
            public System.DateTime EndTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableeBayItem.EndTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableeBayItem.EndTimeColumn] = value;
                }
            }
            
            public int CurrentStatus {
                get {
                    try {
                        return ((int)(this[this.tableeBayItem.CurrentStatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableeBayItem.CurrentStatusColumn] = value;
                }
            }
            
            public int Quantity {
                get {
                    try {
                        return ((int)(this[this.tableeBayItem.QuantityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableeBayItem.QuantityColumn] = value;
                }
            }
            
            public System.Single MaxBid {
                get {
                    try {
                        return ((System.Single)(this[this.tableeBayItem.MaxBidColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableeBayItem.MaxBidColumn] = value;
                }
            }
            
            public System.DateTime TimeStamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableeBayItem.TimeStampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableeBayItem.TimeStampColumn] = value;
                }
            }
            
            public bool IsTitleNull() {
                return this.IsNull(this.tableeBayItem.TitleColumn);
            }
            
            public void SetTitleNull() {
                this[this.tableeBayItem.TitleColumn] = System.Convert.DBNull;
            }
            
            public bool IsStartPriceNull() {
                return this.IsNull(this.tableeBayItem.StartPriceColumn);
            }
            
            public void SetStartPriceNull() {
                this[this.tableeBayItem.StartPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrentPriceNull() {
                return this.IsNull(this.tableeBayItem.CurrentPriceColumn);
            }
            
            public void SetCurrentPriceNull() {
                this[this.tableeBayItem.CurrentPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsEndPriceNull() {
                return this.IsNull(this.tableeBayItem.EndPriceColumn);
            }
            
            public void SetEndPriceNull() {
                this[this.tableeBayItem.EndPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsItemNumberNull() {
                return this.IsNull(this.tableeBayItem.ItemNumberColumn);
            }
            
            public void SetItemNumberNull() {
                this[this.tableeBayItem.ItemNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsCatagoryNull() {
                return this.IsNull(this.tableeBayItem.CatagoryColumn);
            }
            
            public void SetCatagoryNull() {
                this[this.tableeBayItem.CatagoryColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumBidsNull() {
                return this.IsNull(this.tableeBayItem.NumBidsColumn);
            }
            
            public void SetNumBidsNull() {
                this[this.tableeBayItem.NumBidsColumn] = System.Convert.DBNull;
            }
            
            public bool IsStartDateNull() {
                return this.IsNull(this.tableeBayItem.StartDateColumn);
            }
            
            public void SetStartDateNull() {
                this[this.tableeBayItem.StartDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsEndTimeNull() {
                return this.IsNull(this.tableeBayItem.EndTimeColumn);
            }
            
            public void SetEndTimeNull() {
                this[this.tableeBayItem.EndTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrentStatusNull() {
                return this.IsNull(this.tableeBayItem.CurrentStatusColumn);
            }
            
            public void SetCurrentStatusNull() {
                this[this.tableeBayItem.CurrentStatusColumn] = System.Convert.DBNull;
            }
            
            public bool IsQuantityNull() {
                return this.IsNull(this.tableeBayItem.QuantityColumn);
            }
            
            public void SetQuantityNull() {
                this[this.tableeBayItem.QuantityColumn] = System.Convert.DBNull;
            }
            
            public bool IsMaxBidNull() {
                return this.IsNull(this.tableeBayItem.MaxBidColumn);
            }
            
            public void SetMaxBidNull() {
                this[this.tableeBayItem.MaxBidColumn] = System.Convert.DBNull;
            }
            
            public bool IsTimeStampNull() {
                return this.IsNull(this.tableeBayItem.TimeStampColumn);
            }
            
            public void SetTimeStampNull() {
                this[this.tableeBayItem.TimeStampColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class eBayItemRowChangeEvent : EventArgs {
            
            private eBayItemRow eventRow;
            
            private DataRowAction eventAction;
            
            public eBayItemRowChangeEvent(eBayItemRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public eBayItemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
